{"version":3,"file":"static/js/618.07e5367e.chunk.js","mappings":"iKACA,EAA4B,0BAA5B,EAAiE,yB,6CCejE,EARkB,SAAHA,GAA+C,IAA1CC,EAAQD,EAARC,SAAUC,EAAQF,EAARE,SAAaC,GAAKC,EAAAA,EAAAA,GAAAJ,EAAAK,GAC9C,OACEC,EAAAA,EAAAA,KAAA,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAASJ,GAAK,IAAEK,UAAS,GAAAC,OAAKC,EAAgB,KAAAD,OAAIP,EAAWQ,EAAiB,IAAKT,SAChFA,IAGP,C,qECbA,EAA4B,4BAA5B,EAA+D,uB,mBC6B/D,EAtBiB,SAAHD,GAA0C,IAArCC,EAAQD,EAARC,SAAQU,EAAAX,EAAEY,UAAAA,OAAS,IAAAD,EAAC,GAAGA,EAEhCE,GAAMC,EAAAA,EAAAA,UAaZ,OAXAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,IAAIC,sBAAqB,SAAAC,GACtC,IAAOC,GAAPC,EAAAA,EAAAA,GAAgBF,EAAO,GAAX,GACZC,EAAME,OAAOC,UAAUC,OAAOb,EAAaS,EAAMK,gBAC9CL,EAAMK,gBAAgBR,EAASS,UAAUN,EAAME,OACtD,GAAG,CACCT,UAAWA,IAEfI,EAASU,QAAQb,EAAIc,QACzB,GAAG,CAACf,KAGAN,EAAAA,EAAAA,KAAA,OAAKE,UAAWE,EAAkBG,IAAKA,EAAIZ,SACtCA,GAGb,C,oEC3BA,MAA4B,6BAA5B,EAAmE,2BAAnE,EAAqG,wB,+ECsCrG,EA9BkB,WAEd,IAAO2B,GAAYC,EAAAA,EAAAA,KAAZD,SACAE,GAAQC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMF,IAAI,IAA1CA,KACAG,GAASF,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAME,KAAK,IAA5CD,MACDE,EAAKP,IAEX,OACItB,EAAAA,EAAAA,KAAA,OAAKE,UAAWE,EAAiBT,SACvB,OAALgC,QAAK,IAALA,OAAK,EAALA,EAAOG,KAAI,SAAAC,GAAE,OACV/B,EAAAA,EAAAA,KAACgC,EAAAA,EAAQ,CAAArC,UACLK,EAAAA,EAAAA,KAAA,OAAKE,UAAWE,EAAeT,UAC3BK,EAAAA,EAAAA,KAACiC,EAAAA,EAAK,CAACrC,SAAUiC,EAAGK,UAAU,KAAOH,EAAGI,IAAIxC,UACxCyC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,GAAE,IAAAnC,OAAM4B,EAAGI,KAAMxC,SAAA,EACfyC,EAAAA,EAAAA,MAAA,OAAKlC,UAAWE,EAAYT,SAAA,EACxBK,EAAAA,EAAAA,KAAA,OAAKuC,IAAKR,EAAGS,MAAOC,IAAI,QACxBzC,EAAAA,EAAAA,KAAA,KAAAL,SAAIoC,EAAGW,WAEX1C,EAAAA,EAAAA,KAAA,OAAKE,UAAWE,EAAYT,SACvBoC,EAAGY,SAAc,OAAJnB,QAAI,IAAJA,OAAI,EAAJA,EAAMW,OAAOnC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAO,CAACC,QAAQ,QAAOlD,UAACK,EAAAA,EAAAA,KAAC8C,EAAAA,IAAc,gBAT5Ef,EAAGI,IAcP,KAI3B,C","sources":["webpack://frontend/./src/@components/container/Style3.module.scss?6f5b","@components/container/Style3.tsx","webpack://frontend/./src/@components/observer/Observer.module.scss?654a","@components/observer/index.tsx","webpack://frontend/./src/pages/rooms/chats/Width1000.module.scss?f4f1","pages/rooms/chats/Width1000.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Style3_container__UnzqP\",\"selected\":\"Style3_selected__7EHTu\"};","import styles from './Style3.module.scss';\nimport React from 'react'\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode,\n  selected?: boolean,\n};\n\nconst Container = ({children, selected, ...props}: Props) => {\n  return (\n    <div {...props} className={`${styles.container} ${selected ? styles.selected: \"\"}`}>\n      {children}\n    </div>\n  )\n}\n\nexport default Container","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Observer_container__fqmeT\",\"show\":\"Observer_show__zCz8Q\"};","import styles from './Observer.module.scss';\nimport React, {useEffect, useRef} from 'react';\n\ninterface Props {\n    children: React.ReactNode,\n    threshold?: number\n}\n\nconst Observer = ({children, threshold=0.5}: Props) => {\n\n    const ref = useRef<any>();\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(entries => {\n            const [entry] = entries;\n            entry.target.classList.toggle(styles.show, entry.isIntersecting);  \n            if(entry.isIntersecting) observer.unobserve(entry.target);\n        }, {\n            threshold: threshold\n        });\n        observer.observe(ref.current);\n    }, [threshold]);\n\n    return (\n        <div className={styles.container} ref={ref}>\n            {children}\n        </div>\n    )\n}\n\nexport default Observer","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Width1000_container__tMHy5\",\"element\":\"Width1000_element__IY2t7\",\"item\":\"Width1000_item__IrgEf\",\"selected\":\"Width1000_selected__dAG2T\"};","import styles from './Width1000.module.scss';\nimport { useAppSelector } from '@redux/hooks/useRedux';\nimport { Link } from 'react-router-dom';\nimport useQuery from '@hooks/useQuery';\nimport Message from '@components/hover/Mesage';\nimport { AiOutlineCrown } from 'react-icons/ai';\nimport Observer from '@components/observer';\nimport Round from '@components/container/Style3';\n\nconst Width1000 = () => {\n\n    const {getQuery} = useQuery();\n    const {user} = useAppSelector(state => state.user);\n    const {chats} = useAppSelector(state => state.rooms);\n    const id = getQuery();\n    \n    return (\n        <div className={styles.container}>\n            {chats?.map(el => \n                <Observer key={el._id}>\n                    <div className={styles.element}>\n                        <Round selected={id.substring(1) === el._id}>\n                            <Link to={`?${el._id}`}>\n                                    <div className={styles.item}>\n                                        <img src={el.image} alt=\"qs\" />\n                                        <p>{el.name}</p>\n                                    </div>\n                                    <div className={styles.item}>\n                                        {el.admin === user?._id && <Message message=\"admin\"><AiOutlineCrown/></Message>}\n                                    </div>\n                            </Link>\n                        </Round>\n                    </div>    \n                </Observer>\n            )}\n        </div>\n    )\n}\n\nexport default Width1000"],"names":["_ref","children","selected","props","_objectWithoutProperties","_excluded","_jsx","_objectSpread","className","concat","styles","_ref$threshold","threshold","ref","useRef","useEffect","observer","IntersectionObserver","entries","entry","_slicedToArray","target","classList","toggle","isIntersecting","unobserve","observe","current","getQuery","useQuery","user","useAppSelector","state","chats","rooms","id","map","el","Observer","Round","substring","_id","_jsxs","Link","to","src","image","alt","name","admin","Message","message","AiOutlineCrown"],"sourceRoot":""}